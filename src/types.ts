// Data Transfer Objects (DTOs) and Command Models for API
import type { Database } from './db/database.types';

// --- User & Preferences ---
// Standalone preferences shape (not directly mapped to a table)
export type PreferencesDto = {
  categories: string[];
};

// Response DTO for user profile
export type UserProfileDto = {
  id: string;
  email: string;
  preferences: PreferencesDto;
};

// Command Model for updating user preferences
export type UpdatePreferencesCommand = {
  preferences: PreferencesDto;
};

// --- Pagination ---
export type PaginationMetaDto = {
  page: number;
  size: number;
  total: number;
};

export type PaginatedDto<T> = {
  data: T[];
  meta: PaginationMetaDto;
};

// --- Projects ---
// Underlying Supabase-generated types
type ProjectRow = Database['public']['Tables']['travel_projects']['Row'];
type ProjectInsert = Database['public']['Tables']['travel_projects']['Insert'];

// DTO for returning project info in lists
export type ProjectDto = Pick<ProjectRow, 'id' | 'name' | 'duration_days' | 'planned_date'>;

// Command Model for creating a project (user_id is inferred from JWT, id/created_on are autogenerated)
export type CreateProjectCommand = Omit<ProjectInsert, 'id' | 'created_on' | 'user_id'>;

// Command Model for updating a project (all fields optional)
export type UpdateProjectCommand = Partial<CreateProjectCommand>;

// Paginated list response for projects
export type ProjectsListResponseDto = PaginatedDto<ProjectDto>;

// --- Notes ---
// Underlying Supabase-generated types
type NoteRow = Database['public']['Tables']['notes']['Row'];
type NoteInsert = Database['public']['Tables']['notes']['Insert'];

// DTO for a single note
export type NoteDto = NoteRow;

// Command Model for creating a note (id/updated_on autogenerated; project_id from path)
// Ensure priority is required
export type CreateNoteCommand = Omit<NoteInsert, 'id' | 'updated_on'> & Required<Pick<NoteInsert, 'priority'>>;

// Command Model for updating a note (all updatable fields optional)
export type UpdateNoteCommand = Partial<Omit<NoteInsert, 'id' | 'updated_on' | 'project_id'>>;

// Paginated list response for notes
export type NotesListResponseDto = PaginatedDto<NoteDto>;

// --- AI Plan Generation ---
// Schedule item returned by plan generation
export type ScheduleItemDto = {
  day: number;
  activities: string[];
};

// Command Model for generating a plan synchronously
export type GeneratePlanCommand = {
  model: string; // e.g. 'gpt-5'
  notes: Array<{
    id: string;
    content: string;
    priority: number;
    place_tags: string[] | null;
  }>;
  preferences?: PreferencesDto;
};

// Response DTO for plan generation
export type PlanResponseDto = {
  schedule: ScheduleItemDto[];
};

// --- AI Logs ---
// Underlying Supabase-generated types
type AiLogRow = Database['public']['Tables']['ai_logs']['Row'];
type AiLogInsert = Database['public']['Tables']['ai_logs']['Insert'];

// DTO for a single AI log entry
export type AILogDto = Pick<AiLogRow, 'id' | 'project_id' | 'prompt' | 'response' | 'status' | 'duration_ms' | 'version' | 'created_on'>;

// Paginated list response for AI logs
export type AILogsListResponseDto = PaginatedDto<AILogDto>;

// --- End of DTOs and Command Models ---
